#!/usr/bin/python3 -O

# -*- coding: utf-8 -*-

from pathlib import Path

import click
from ereuse_utils import cli

from ereuse_workbench.erase import EraseType
from ereuse_workbench.test import TestDataStorageLength
from ereuse_workbench.workbench import Workbench


@click.command(help=Workbench.__doc__)
@click.option('--benchmark/--no-benchmark',
              default=False,
              help='Benchmark the components.')
@click.option('--smart',
              type=cli.Enum(TestDataStorageLength),
              help='Perform a SMART test to the data storage units.')
@click.option('--erase', type=cli.Enum(EraseType), help='Erase all data storage units.')
@click.option('--erase-steps',
              type=click.IntRange(min=1),
              default=1,
              help='Number of erasure STEPS.')
@click.option('--erase-leading-zeros/--no-erase-leading-zeros',
              default=False,
              help='Shall we perform an extra erasure step writing zeros?')
@click.option('--stress',
              type=click.IntRange(min=0),
              default=0,
              help='Run stress test for the given MINUTES (0 to disable)')
@click.option('--install',
              help='The name of the FSA OS to install, without the ".fsa" extension. '
                   'The file has to be in /media/workbench-images')
@click.option('--server',
              help='Connect to a WorkbenchServer at the specified URI. '
                   'This will activate USBSneaky module, load the '
                   'settings from the server, and keep indefinitely waiting for an USB to'
                   'be plugged-in.')
@click.option('--json',
              type=click.Path(dir_okay=False, writable=True, resolve_path=True),
              help='Write the resulting report to a JSON file.')
def erwb(**kwargs):
    json = kwargs.pop('json')
    json = Path(json) if json else None
    workbench = Workbench(**kwargs, json=json)
    workbench.run()
    print('\a')  # make a bip
    if kwargs.get('server', None):
        print('You can still link the computer.')
        print('Stop the machine by pressing the power button.')
        # We wait indefinitely until the user presses CTRL-C
        # or our child process dies for some reason
        # Note that the child is a daemon so it will be terminated
        # once this main process terminates too
        workbench.usb_sneaky.join()


if __name__ == '__main__':
    erwb()
